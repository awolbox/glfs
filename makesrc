#!/usr/bin/env bash

BUILD_DEV=$build_dev
BUILD_DIR=$build_dir
BUILD_TGT=$build_tgt
TBX_USER=$toolbox_user
TBX_DIR=$toolbox_dir
SOURCE_GET=$source_get
SOURCE_DIR=$source_dir
SOURCE_KEYRING=/home/$TBX_USR/.gnupg/sourceman.keys
CCC_TBX='gnu_linux_from_scratch'
#MAKEFLAGS=$makeflags

args=('-h' '--help' '-q' '--query' '-i' '--interactive')

# exit codes 
EX_OK=0				# completed without error
EX_USAGE=64			# error - general command line usage error 
EX_NOPERM=70		# error - improper permissions - (root permissions needed)
EX_UNAVAILABLE=69	# error - improper input - (SRCBUILD not found)
EX_NOHOST=68		# error - source get failed
EX_DATAERR=65		# error - source verification failed (.sig, checksums, etc.)
EX_CANTCREAT=73		# error - makesrc failed - cannot build source

usage()
{
		largs()
		{
				for x in ${args[@]}
						do
								echo -n "[$x] "
						done
		}
		usage_long()
		{
				echo -e "Usage: $(basename $0) [OPTIONS]... [CCOPTIONS]... [SRCBUILD]"
				echo -e "\nbuild source from SRCBUILD"
				echo -e "\nOptions:\n"
				echo -e "  ${args[0]}, ${args[1]}\t\tshow this help screen"
				echo -e "  ${args[2]}, ${args[3]}\t\tdisplays various information about SRCBUILD"
				echo -e "  ${args[4]}, ${args[5]}\trun $(basename $0) interactively"
				echo -e "\nAuthor: awolbox <awol@member.fsf.org>"
		}
		usage_error()
		{ 
				echo -e "$(basename $0): invalid command\nUsage: $(largs)... [SRCBUILD]" 
		}
}

srcsrcbuild() # source SRCBUILD
{
		if [ -f ./SRCBUILD ] && [ -O ./SRCBUILD ] && [ -r ./SRCBUILD ] && [ -G ./SRCBUILD ] && [ -n ./SRCBUILD ];
		then
				source ./SRCBUILD
		else
				exit $EX_UNAVAILABLE
		fi
}

srcinfo() # parse & echo various different $vars to STDOUT
{
		info_print()
		{
				echo -e "\e[0;31mSOURCE\e[0m\n"
				echo -e "\t$srcname - ($srcver)\n"
				echo -e "\e[0;31mINFO\e[0m\n"
				echo -e "  $info\n"
				echo -e "\e[0;31mPROJECT HOME\e[0m\n"
				echo -e "  $srcurl\n"	
				echo -e "\e[0;31mLICENSE\e[0m\n"
				echo -e "  \e[1;31mThis project is licenced under the following:\e[0m ${srccpy[*]}\n"
		};srcsrcbuild; info_print;
}

srcdepends() # list/get dependencies for source
{ 		
		depends_count=$(echo "${depends[*]}" | wc -w)
	
		resolve_depends()
		{
				for x in ${depends[@]}
				do
					if [ -d $SOURCE_DIR/$x ];
					then
							(cd $SOURCE_DIR/$x; makesrc)
					else
							exit $EX_UNAVAILABLE
					fi
				done
		}

		if [ "$1" == "${args[4]}" ] || [ "$1" == ${args[5]} ];
		then
				echo -e "\n\t\e[1;31mDependencies\e[0m($depends_count)\e[1;31m:\e[0m\n\n\t\t${depends[*]}\n"
				echo -e -n "\t\e[1;31mInstall?:\e[0m "
				read u

				if [ "$u" == "y" ] || [ "$u" == "Y" ] || [ "$u" == "yes" ] || [ "$u" == "Yes" ] || [ "$u" == "YES" ];
				then
						$resolve_depends
				elif [ "$u" == "n" ] || [ "$u" == "N" ] || [ "$u" == "no" ] || [ "$u" == "No" ] || [ "$u" == "NO" ];
				then
						exit $EX_USAGE
				fi
		else
				$resolve_depends
		fi
}

srcrepos() # source repository $vars (much more work needs done for this (don't know if i want it))
{
		:
		#gnu_repo='https://ftp.gnu.org/gnu'
		#savannah_repo=''	
}

makesrc() # make a source-build from a SRCBUILD
{
		srcextr() # extract source tarball (more support for other filetypes later)
		{
			v=$(ls . | grep ".tar" | grep -v ".sig")
			w=$(echo "$(${v})" | cut -d "." -f 4)
			if [ "$w" == "xz" ] || [ "$w" == "gz" ];
			then
					tar xzvf $(${v})
			elif [ "$w" == "bz2" ];
			then
					tar xzvf $(${v})
			else
					echo "MORE WORK NEEDS TO BE DONE IN THIS PROGRAM IN ORDER\n TO SUPPORT THE FOLLOWING \
							FILE TYPE: $(${w})\n"
					exit $EX_UNAVAILABLE
			fi
		}
		
		src_get() # TESTING - (unstable)
		{
			if [ "$source_get" == "wget" ];
			then
					wget $srcget --directory-prefix=$SOURCE_DIR/$srcname
					wget $srcsig --directory-prefix=$SOURCE_DIR/$srcname
			elif [ "$source_get" == "curl" ];
			then
					:
			fi
		}
		
		srcsrcbuild
		
		[ $EUID -ne 0 ] &&
		{
				exit $EX_NOPERM;
		}

		[ "$srcname" == "$CCCTBX" ]; # CC_TOOLCHAIN
		{
				:# cross-compilation toolchain
		}

		if [ -n "${depends[*]}" ];
		then
				srcdepends
		elif [ -e $SOURCE_DIR/$srcname/$(ls . | grep ".tar" | grep -v ".sig") ];
		then
				srcextr
				$srcbuild
		else
				if [ -z $SOURCE_DIR/gnu-keyring.gpg ];
				then
						wget https://ftp.gnu.org/gnu/gnu-keyring.gpg --directory-prefix=$SOURCE_DIR
				elif [ -e $SOURCE_DIR/gnu-keyring.gpg ] && [ -n $SOURCE_DIR/gnu-keyring.gpg ];
				then
						src_get
						verify_sig()
						{
								gpg --no-default-key --keyring=$SOURCE_KEYRING --verify ${srcname}.sig 2> \
										.VERIFY && cat .VERIFY | grep "GOOD"
						}
						if [ `verify_sig` == "Good" ];
						then
								srcextr
								$srcbuild									
						else
								exit $EX_DATAERR
						fi
				fi
		fi
}

[ "$#" -eq 0 ] &&
{		
		usage; usage_error; exit $EX_USAGE;
}

[ "$#" -gt 0 ] &&
{
		[ "$1" == "${args[0]}" ] || [ "$1" == "${args[1]}" ] && 
		{		
				[ -z "$2" ] &&
				{
						usage; usage_long; exit $EX_OK;
				}
		}
		[ "$1" == "${args[2]}" ] || [ "$1" == "${args[3]}" ] &&
		{
				[ "$2" == "SRCBUILD" ] &&
				{
						srcinfo; exit $?;
				} || \
				{
						usage; usage_error; exit $EX_USAGE;
				}
		}
		[ "$1" == "${args[4]}" ] || [ "$1" == "${args[5]}" ] &&
		{
				[ "2" == "SRCBUILD" ] &&
				{
						makesrc; exit $?; # interactive ...
				}
		}
		[ "$1" == "SRCBUILD" ] && [ -z "$2" ] &&
		{
				[ -f $CONFIG_OPTIONS ] &&
				{
						source $CONFIG_OPTIONS;
				}
				makesrc; exit $?;
		} || \
				{
						usage; usage_error; exit $EX_USAGE;
				}
}; exit $?

config_file_options() # TESTING makesrc config file
{
	[ -f $HOME/.config/makesrc/config ] || [ -f ./config ]
}

cc_toolbox_optins() # TESTING system cc_toolbox options
{
	CARGS=('-s' '--source-dir' '--cc' '--cc-dev' '--cc_boot' '--cc-part' '--cc-tgt-name' '--cc-tbx-name')
	for y in "$@"
	do
		for z in "${CARGS[@]}"
		do
			if [ "$y" == "$z" ];
			then
				if [ "$#" -gt 1 ];
				then
						case "$z" in
							${CARGS[0]}):;;
							${CARGS[1]}):;;
							${CARGS[2]}):;;
							${CARGS[3]}):;;
							${CARGS[4]}):;;
							${CARGS[5]}):;;
							${CARGS[6]}):;;
							${CARGS[7]}):;;
						esac
				fi
			fi
		done
	done
}


