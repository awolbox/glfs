#!/usr/bin/bash

readonly SRCBUILD_CONFIG=${SRCBUILD_USER_CONF:-${HOME}/.config/srcman/makesrc.conf}

readonly VERSION='2.0'

# exit codes 
readonly EX_OK='0'				# completed without error
readonly EX_USAGE='64'			# error - general command line usage error 
readonly EX_NOPERM='70'			# error - improper permissions - (root permissions needed)
readonly EX_UNAVAILABLE='69'		# error - improper input - (SRCBUILD not found)
readonly EX_NOHOST='68'			# error - source get failed
readonly EX_DATAERR='65'			# error - corrupt data (.sig, checksums, etc.)
readonly EX_CANTCREAT='73'		# error - makesrc failed - cannot build source

# perm/sec
readonly _UID="$(id -u "$USER")"
readonly _GID="$(id -g "$USER")"

# common color values
readonly green='\e[0;32m'
readonly yellow='\e[0;33m'
readonly magenta='\e[0;35m'
readonly Bold='\e[1m'
readonly Bred='\e[1;31m'
readonly Bgreen='\e[1;32m'
readonly Byellow='\e[1;33m'
readonly Bblue='\e[1;34m'
readonly Bmagenta='\e[1;35m'
readonly reset='\e[0m'

# interaction/ux
_message() { [ $QUIET = 0 ] &&:; }
_warning() { [ $QUIET = 0 ] &&:; }
_error() { echo -e "$(basename 0): ${Bred}ERROR: ${reset} ${*}" >&2; }
_die() { _error ${@} && exit $_EX; }

cmd_version()
{
		cat <<-_EOF
		$(basename $0) $VERSION - build source using a SRCBUILD file.
		_EOF
}

cmd_usage()
{
	cmd_version
	echo "
	;Usage:
	;    $(basename $0) [Options] SRCBUILD...
	;	
	;Options:
	;    -q, --query    read SRCBUILD information
	;    -s, --silent   do not prompt the user
	;    -v, --version  show version information
	;    -h, --help     display this help screen
	;	
	;Author: awolbox <awolbox@member.fsf.org>\
	" | cut -d ";" -f 2
}

# Check to see if a user configuration was provided
_has_userconf()
{
	command -v $SRCBUILD_CONFIG >&2 /dev/null && { DEFAULT=1; }
}

# provide a random space in shared memory
_tmp_space()
{
		local tmpf
		tmpfile

		tmpf="$(mktemp -u "$SECURE_TMPDIR/XXXXXXXXXXXXXXXXXXXX")"

		umask 066
		[ $? -eq 0 ] || _EX=$EX_NOPERM; _die "Fatal error setting permission umask for temporary files."
		[ -r "$tmpf" ] && _EX=$EX_DATAERR; _die "Fatal error, someone may be trying to highjack temporary files."
	
		touch "$tmpf"
		[ $? -eq 0 ] && _EX=$EX_USAGE; _die "Fatal error creating temporary files"
	
		TMP=${tmpf}
		return 0
}

# Set permission/ownership values to source/file
_set_proper() 
{
		local path=
		chown -R ${_UID}:${GID} ${path} || _EX=$EX_NOPERM; _die "unable to set proper ownership permissions of ${path}"
		chmod 0711 ${path} || _EX=$EX_NOPERM; _die "unable to set proper permissions of ${path}"
}

# Check to see if building source requires dependencies
_has_dependencies()
{
		typeset -a deps
		deps=($@)

		for a in $deps
		do
				:
		done
}

_source_srcbuild()
{
		SRCBUILD=./SRCBUILD
		
		# Sanity checks
		[ -f ./${SRCBUILD} ] && source $SRCBUILD || _EX=$EX_UNAVAILABLE; _die "Fatal error in SRCBUILD"
}

# Read SRCBUILD information
cmd_info()
{
	_source_info()
	{
		# Set color
		local _color=$Bred
		[ $DEFAULT -eq 1 ] && { _color=$infocolor; }
				
		# Send various variable data to STDOUT (tidy it up a bit)
		cat <<-_EOF
		${_color}SOURCE${reset}
				$srcname - $srcver
		${_color}INFO${reset}
			$info
		${_color}PROJECT HOME${reset}
			$srcurl
		${_color}LICENSE${reset}
		  ${_color}This project is licenced under the following:${reset} ${srccpy[*]}
		_EOF
	}

	while read -r ii
	do
		_source_info
	done < "$TMP"
}


# check/get dependencies for needed source
cmd_source_depends() 
{ 		
		local depends_count=$(echo "${depends[*]}" | wc -w)
	
		cmd_resolve_depends()
		{
				for x in ${depends[@]}
				do
						:
				done
		}

		if [ $QUIET -eq 1 ];
		then
				echo
				cat <<-_EOF
						${_color}Dependencies${reset}($depends_count)${_color}:${reset}
				
							${depends[*]}
				
				${_color}Install?:${reset}
				_EOF
				read u
				case $u in
						'y'|'Y'|'yes'|'Yes'|'YES') $resolve_depends ;;
						'n'|'N'|'no'|'No'|'NO') return $EX_USAGE ;;
				esac;
		else
				cmd_resolve_depends
		fi
}

# source repository $vars (much more work needs done for this (don't know if i want it))
srcrepos() 
{
		:
		#gnu_repo='https://ftp.gnu.org/gnu'
		#savannah_repo=''	
}

makesrc() # make a source-build from a SRCBUILD
{
		srcextr() # extract source tarball (more support for other filetypes later)
		{
			v=$(ls . | grep ".tar" | grep -v ".sig")
			w=$(echo "$(${v})" | cut -d "." -f 4)
			if [ "$w" == "xz" ] || [ "$w" == "gz" ];
			then
					tar xzvf $(${v})
			elif [ "$w" == "bz2" ];
			then
					tar xzvf $(${v})
			else
					echo "MORE WORK NEEDS TO BE DONE IN THIS PROGRAM IN ORDER\n TO SUPPORT THE FOLLOWING \
							FILE TYPE: $(${w})\n"
					exit $EX_UNAVAILABLE
			fi
		}
		
		src_get() # TESTING - (unstable)
		{
			if [ "$source_get" == "wget" ];
			then
					wget $srcget --directory-prefix=$SOURCE_DIR/$srcname
					wget $srcsig --directory-prefix=$SOURCE_DIR/$srcname
			elif [ "$source_get" == "curl" ];
			then
					:
			fi
		}
		
		srcsrcbuild
		
		[ $EUID -ne 0 ] &&
		{
				exit $EX_NOPERM;
		}

		[ "$srcname" == "$CCCTBX" ]; # CC_TOOLCHAIN
		{
				:# cross-compilation toolchain
		}

		if [ -n "${depends[*]}" ];
		then
				srcdepends
		elif [ -e $SOURCE_DIR/$srcname/$(ls . | grep ".tar" | grep -v ".sig") ];
		then
				srcextr
				$srcbuild
		else
				if [ -z $SOURCE_DIR/gnu-keyring.gpg ];
				then
						wget https://ftp.gnu.org/gnu/gnu-keyring.gpg --directory-prefix=$SOURCE_DIR
				elif [ -e $SOURCE_DIR/gnu-keyring.gpg ] && [ -n $SOURCE_DIR/gnu-keyring.gpg ];
				then
						src_get
						verify_sig()
						{
								gpg --no-default-key --keyring=$SOURCE_KEYRING --verify ${srcname}.sig 2> \
										.VERIFY && cat .VERIFY | grep "GOOD"
						}
						if [ `verify_sig` == "Good" ];
						then
								srcextr
								$srcbuild									
						else
								exit $EX_DATAERR
						fi
				fi
		fi
}

# Options (getopt)
#cargs=('--source-dir' '--cc' '--cc-dev' '--cc_boot' '--cc-part' '--cc-tgt-name' '--cc-tbx-name')

# Global options
VERBOSE=0
QUIET=0
DEBUG=0
DEFAULT=0

small_arg="hvs:q"
long_arg="help,version,silent,query"
opts="$(getopt -o $small_arg -l $long_arg -n "$PROGRAM $COMMAND" -- "$@")"
ret=$?

eval set -- "$opts" 

while true; do case $1 in
		-q|--query) shift; SRCBUILD=$2; shift 2;;
		-s|--silent) shift; QUIET=0; shift ;;
		-h|--help) shift; cmd_usage; exit 0 ;;
		--) shift; break ;;
esac done

[ $ret -ne 0 ] && exit $?

## TEST
_duuno(){ #?
		TGTBUILD_DEV=$build_dev
		TGTBUILD_DIR=$build_dir
		TGTBUILD_TGT=$build_tgt
		CCTC_USR=$toolbox_user
		CCTC_DIR=$toolbox_dir
		CCTC_TBX=''
		SOURCE_GET=$source_get
		SOURCE_DIR=$source_dir
		SOURCE_KEYRING=/home/$CCTC_USR/.gnupg/sourceman.keys
		#MAKEFLAGS=$makeflags
}

