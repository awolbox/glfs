#!/usr/bin/env bash

:(){ #?
		TGTBUILD_DEV=$build_dev
		TGTBUILD_DIR=$build_dir
		TGTBUILD_TGT=$build_tgt
		CCTC_USR=$toolbox_user
		CCTC_DIR=$toolbox_dir
		SOURCEMAN_GET=$source_get
		SOURCEMAN_DIR=$source_dir
		SOURCEMAN_KEYRING=/home/$CCTC_USR/.gnupg/sourceman.keys
		CCTC_TBX=''
		#MAKEFLAGS=$makeflags
}

readonly SRCBUILD_CONFIG=${SRCBUILD_USER_CONF:-$HOME/.config/srcman/makesrc.conf}
readonly SRCBUILD_DEFAULT_CONFIG=0

readonly VERSION=2.0

# exit codes 
readonly EX_OK=0				# completed without error
readonly EX_USAGE=64			# error - general command line usage error 
readonly EX_NOPERM=70			# error - improper permissions - (root permissions needed)
readonly EX_UNAVAILABLE=69		# error - improper input - (SRCBUILD not found)
readonly EX_NOHOST=68			# error - source get failed
readonly EX_DATAERR=65			# error - corrupt data (.sig, checksums, etc.)
readonly EX_CANTCREAT=73		# error - makesrc failed - cannot build source

# perm/sec
readonly _UID="$(id -u "$USER")"
readonly _GID="$(id -u "$GROUP")"

# common color values
readonly green='\e[0;32m'
readonly yellow='\e[0;33m'
readonly magenta='\e[0;35m'
readonly Bold='\e[1m'
readonly Bred='\e[1;31m'
readonly Bgreen='\e[1;32m'
readonly Byellow='\e[1;33m'
readonly Bblue='\e[1;34m'
readonly Bmagenta='\e[1;35m'
readonly reset='\e[0m'

# interaction/ux
_message() { [ $QUIET = 0 ] &&:; }
_warning() { [ $QUIET = 0 ] &&:; }
_error() { echo -e "$(basename 0): ${Bred}ERROR: ${reset} ${*}" >&2; }
_die() { _error ${@} && exit $_EX; }

# misc
args=('-h' '--help' '-q' '--query' '-i' '--interactive')
ret=$?

# Check to see if a user configuration was provided
_has_userconf()
{
	command -v $SRCBUILD_USER_CONFIG >&2 /dev/null && { SRCBUILD_DEFAULT_CONFIG=1; } || { $SRCBUILD_DEFAULT_CONFIG=0; }
}

# provide a random space in shared memory
_tmp_space()
{
		local tmpf
		tmpfile

		tmpf="$(mktemp -u "$SECURE_TMPDIR/XXXXXXXXXXXXXXXXXXXX")"

		umask 066
		[ $? -eq 0 ] || _EX=$EX_NOPERM; _die "Fatal error setting permission umask for temporary files."
		[ -r "$tmpf" ] && _EX=$EX_DATAERR; _die "Fatal error, someone may be trying to highjack temporary files."
	
		touch "$tmpf"
		[ $? -eq 0 ] && _EX=$EX_USAGE; _die "Fatal error creating temporary files"
	
		TMP=${tmpf}
		return 0
}

# Set permission/ownership values to source/file
_set_proper() { # (sec/perm) - set proper ownership of all source/files
		local path=
		chown -R ${_UID}:${GID} ${path} || _EX=$EX_NOPERM; _die "unable to set proper ownership permissions of ${path}"
		chmod 0711 ${path} || _EX=$EX_NOPERM; _die "unable to set proper permissions of ${path}"
}

# Check to see if building source requires dependencies
_has_dependencies()
{
		typeset -a deps
		deps=($@)

		for a in $deps
		do
				:
		done
}

_usage_long()
{
		echo -e "Usage: $(basename $0) [OPTIONS]... [CCOPTIONS]... [SRCBUILD]"
		echo -e "\nOptions:\n"
		echo -e "  ${args[0]}, ${args[1]}\t\tshow this help screen"
		echo -e "  ${args[2]}, ${args[3]}\t\tdisplays various information about SRCBUILD"
		echo -e "  ${args[4]}, ${args[5]}\trun $(basename $0) interactively"
		echo -e "\nbuild source from SRCBUILD"
		echo -e "\nAuthor: awolbox <awol@member.fsf.org>\n"
}

_usage_error()
{ 
		largs() { for x in ${args[@]}; do echo -n "[$x] "; done; }
		echo -e "$(basename $0): invalid command\nUsage: $(largs)... [SRCBUILD]" 
}

# Source SRCBUILD
cmd_source()
{
		SRCBUILD=
		
		# Sanity checks
		[ -f ./${SRCBUILD} ] && source ./SRCBUILD || _EX=$EX_UNAVAILABLE; _die "Fatal error in SRCBUILD"
}

# Read SRCBUILD information
cmd_info()
{
		local _color
				
		# Set colors based on configuration variables
		[ $SRCBUILD_DEFAULT_CONFIG -eq 1 ] && { _color=$infocolor; }
		[ $SRCBUILD_DEFAULT_CONFIG -eq 0 ] && { _color=$Bred; }
				
		# Send various variable data to STDOUT (tidy it up a bit)
		echo -e "${_color}SOURCE${reset}\n"
		echo -e "\t$srcname - ($srcver)\n"
		echo -e "${_color}INFO${reset}\n"
		echo -e "  $info\n"
		echo -e "${_color}PROJECT HOME${reset}\n"
		echo -e "  $srcurl\n"	
		echo -e "${_color}LICENSE${reset}"
		echo -e "  ${_color}This project is licenced under the following:${reset} ${srccpy[*]}\n"
}

srcdepends() # list/get dependencies for source
{ 		
		depends_count=$(echo "${depends[*]}" | wc -w)
	
		resolve_depends()
		{
				for x in ${depends[@]}
				do
					if [ -d "$SOURCE_DIR/$x" ] && [ -f "$SOURCE_DIR/SRCBUILD" ];
					then
							(cd $SOURCE_DIR/$x && makesrc SRCBUILD)
					else
							exit $EX_UNAVAILABLE	
					fi
				done
		}

		if [ "$1" == "${args[4]}" ] || [ "$1" == ${args[5]} ];
		then
				echo -e "\n\t\e[1;31mDependencies\e[0m($depends_count)\e[1;31m:\e[0m\n\n\t\t${depends[*]}\n"
				echo -e -n "\t\e[1;31mInstall?:\e[0m "
				read u

				case $u in
						'y'|'Y'|'yes'|'Yes'|'YES') $resolve_depends ;;
						'n'|'N'|'no'|'No'|'NO') exit $EX_USAGE ;;
				esac
		else
				$resolve_depends
		fi
}

srcrepos() # source repository $vars (much more work needs done for this (don't know if i want it))
{
		:
		#gnu_repo='https://ftp.gnu.org/gnu'
		#savannah_repo=''	
}

makesrc() # make a source-build from a SRCBUILD
{
		srcextr() # extract source tarball (more support for other filetypes later)
		{
			v=$(ls . | grep ".tar" | grep -v ".sig")
			w=$(echo "$(${v})" | cut -d "." -f 4)
			if [ "$w" == "xz" ] || [ "$w" == "gz" ];
			then
					tar xzvf $(${v})
			elif [ "$w" == "bz2" ];
			then
					tar xzvf $(${v})
			else
					echo "MORE WORK NEEDS TO BE DONE IN THIS PROGRAM IN ORDER\n TO SUPPORT THE FOLLOWING \
							FILE TYPE: $(${w})\n"
					exit $EX_UNAVAILABLE
			fi
		}
		
		src_get() # TESTING - (unstable)
		{
			if [ "$source_get" == "wget" ];
			then
					wget $srcget --directory-prefix=$SOURCE_DIR/$srcname
					wget $srcsig --directory-prefix=$SOURCE_DIR/$srcname
			elif [ "$source_get" == "curl" ];
			then
					:
			fi
		}
		
		srcsrcbuild
		
		[ $EUID -ne 0 ] &&
		{
				exit $EX_NOPERM;
		}

		[ "$srcname" == "$CCCTBX" ]; # CC_TOOLCHAIN
		{
				:# cross-compilation toolchain
		}

		if [ -n "${depends[*]}" ];
		then
				srcdepends
		elif [ -e $SOURCE_DIR/$srcname/$(ls . | grep ".tar" | grep -v ".sig") ];
		then
				srcextr
				$srcbuild
		else
				if [ -z $SOURCE_DIR/gnu-keyring.gpg ];
				then
						wget https://ftp.gnu.org/gnu/gnu-keyring.gpg --directory-prefix=$SOURCE_DIR
				elif [ -e $SOURCE_DIR/gnu-keyring.gpg ] && [ -n $SOURCE_DIR/gnu-keyring.gpg ];
				then
						src_get
						verify_sig()
						{
								gpg --no-default-key --keyring=$SOURCE_KEYRING --verify ${srcname}.sig 2> \
										.VERIFY && cat .VERIFY | grep "GOOD"
						}
						if [ `verify_sig` == "Good" ];
						then
								srcextr
								$srcbuild									
						else
								exit $EX_DATAERR
						fi
				fi
		fi
}

[ "$#" -eq 0 ] &&
{		
		usage; usage_error; exit $EX_USAGE;
}

[ "$#" -gt 0 ] &&
{
		[ "$1" == "${args[0]}" ] || [ "$1" == "${args[1]}" ] && 
		{		
				[ -z "$2" ] &&
				{
						usage; usage_long; exit $EX_OK;
				}
		}
		[ "$1" == "${args[2]}" ] || [ "$1" == "${args[3]}" ] &&
		{
				[ "$2" == "SRCBUILD" ] &&
				{
						srcinfo; exit $?;
				} || \
				{
						usage; usage_error; exit $EX_USAGE;
				}
		}
		[ "$1" == "${args[4]}" ] || [ "$1" == "${args[5]}" ] &&
		{
				[ "2" == "SRCBUILD" ] &&
				{
						makesrc; exit $?; # interactive ...
				}
		}
		[ "$1" == "SRCBUILD" ] && [ -z "$2" ] &&
		{
				[ -f $CONFIG_OPTIONS ] &&
				{
						source $CONFIG_OPTIONS;
				}
				makesrc; exit $?;
		} || \
				{
						usage; usage_error; exit $EX_USAGE;
				}
}; exit $?

cc_toolbox_optins() # TESTING system cc_toolbox options
{
	CARGS=('--source-dir' '--cc' '--cc-dev' '--cc_boot' '--cc-part' '--cc-tgt-name' '--cc-tbx-name')
	for y in "$@"
	do
		for z in "${CARGS[@]}"
		do
			if [ "$y" == "$z" ];
			then
				if [ "$#" -gt 1 ];
				then
						case "$z" in
							${CARGS[0]}):;;
							${CARGS[1]}):;;
							${CARGS[2]}):;;
							${CARGS[3]}):;;
							${CARGS[4]}):;;
							${CARGS[5]}):;;
							${CARGS[6]}):;;
						esac
				fi
			fi
		done
	done
}


