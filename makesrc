#!/usr/bin/env bash

SOURCE_KEYRING=/home/$TBX_USR/.gnupg/sourceman.keys
args=('-h' '--help' '-q' '--query' '-i' '--interactive')

usage()
{
		largs()
		{
				for x in ${args[@]}
						do
								echo -n "[ $x ] "
						done
		}
		usage_short()
		{
				echo -e "Usage: $(basename $0) $(largs)... [ SRCBUILD ]"
		}
		usage_long()
		{
				usage_short
				echo -e "\nOptions:\n"
				echo -e "  ${args[0]},${args[1]}\t\tshow this help screen"
				echo -e "  ${args[2]},${args[3]}\t\tdisplays various information about SRCBUILD"
				echo -e "  ${args[4]},${args[5]}\trun $(basename $0) interactively"
				echo
		}
		usage_error()
		{ 
				echo -e "$(basename $0): invalid command\nUsage: $(largs)... [ SRCBUILD ]" 
		}
}

srcsrcbuild() # source SRCBUILD
{
		if [ -f ./SRCBUILD ] && [ -O ./SRCBUILD ] && [ -r ./SRCBUILD ] && [ -G ./SRCBUILD ] && [ -n ./SRCBUILD ];
		then
				source ./SRCBUILD
		else
				exit $E_SBE 
		fi
}

srcinfo() # parse & echo various different $vars to STDOUT
{
		info_print()
		{
				echo -e "\e[0;31mSOURCE\e[0m\n"
				echo -e "\t$srcname - ($srcver)\n"
				echo -e "\e[0;31mINFO\e[0m\n"
				echo -e "  $info\n"
				echo -e "\e[0;31mPROJECT HOME\e[0m\n"
				echo -e "  $srcurl\n"	
				echo -e "\e[0;31mLICENSE\e[0m\n"
				echo -e "  \e[1;31mThis project is licenced under the following:\e[0m ${srccpy[*]}\n"
		};srcsrcbuild; info_print;
}

srcdepends() # list/get dependencies for source
{ 		
		depnum=$(echo "${depends[*]}" | wc -w)
	
		resolve_depends()
		{
				for x in ${depends[@]}
				do
					if [ -d $SOURCE_DIR/$x ];
					then
						cd $SOURCE_DIR/$x
						makesrc
					fi
				done
		}

		if [ "$1" == "${args[4]}" ] || [ "$1" == ${args[5]} ];
		then
				echo -e "\n\t\e[1;31mDependencies\e[0m($depnum)\e[1;31m:\e[0m\n\n\t\t${depends[*]}\n"
				echo -e -n "\t\e[1;31mInstall?:\e[0m "
				read indep

				if [ "$indep" == "y" ] || [ "$indep" == "Y" ] || [ $indep == "yes" ] || [ $indep == "Yes" ] || [ $indep == "YES" ];
				then
						$resolve_depends
				elif [ "$indep" == "n" ] || [ "$indep" == "N" ] || [ $indep == "no" ] || [ $indep == "No" ] || [ $indep == "NO" ];
				then
						exit 1
				fi
		else
				$resolve_depends
		fi
}

srcrepos() # source repository $vars
{
		gnu_repo='https://ftp.gnu.org/gnu'
		savannah_repo=''	
}

makesrc() # make a source-build
{
		srcsrcbuild
		if [ -n "${depends[*]}" ];
		then
				srcdepends
		elif [ -e $SOURCE_DIR/$srcname/$(ls . | grep ".tar" | grep -v ".sig") ];
		then
				$srcbuild
		else
				if [ -z $SOURCE_DIR/gnu-keyring.gpg ];
				then
						wget https://ftp.gnu.org/gnu/gnu-keyring.gpg --directory-prefix=$SOURCE_DIR
				elif [ -e $SOURCE_DIR/gnu-keyring.gpg ] && [ -n $SOURCE_DIR/gnu-keyring.gpg ];
				then
						wget $srcget --directory-prefix=$SOURCE_DIR/$srcname
						wget $srcsig --directory-prefix=$SOURCE_DIR/$srcname
						verify_sig()
						{
								gpg --no-default-key --keyring=$SOURCE_KEYRING --verify ${srcname}.sig 2> \
										.VERIFY && cat .VERIFY | grep "GOOD"
						}
						if [ `verify_sig` == "Good" ];
						then
								$srcbuild									
						else
								exit 1
						fi
				fi
		fi
}

[ "$#" -eq 0 ] &&
{		
		usage; usage_error 1;
}

[ "$#" -gt 0 ] &&
{

		[ "$1" == "${args[0]}" ] && [ -z "$2" ] &&
		{
				usage; usage_short; exit 0;
		}
		[ "$1" == "${args[1]}" ] && [ -z "$2" ] &&
		{
				usage; usage_long; exit 0;
		}
		[ "$1" == "${args[2]}" ] || [ "$1" == "${args[3]}" ] &&
		{
				[ "$2" == "SRCBUILD" ] &&
				{
						srcinfo; exit $?;
				} || \
				{
						usage; usage_error; exit 1;
				}
		}
		[ "$1" == "${args[4]}" ] || [ "$1" == "${args[5]}" ] &&
		{
				:
		}
		[ "$1" == "SRCBUILD" ] && [ -z "$2" ] &&
		{
				makesrc; exit $?;
		} || \
				{
						usage; usage_error; exit 1;
				}
}; exit $?

